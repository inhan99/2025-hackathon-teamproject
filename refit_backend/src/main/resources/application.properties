spring.application.name=refit_backend

spring.datasource.driver-class-name=org.mariadb.jdbc.Driver
spring.datasource.url=${DB_URL:jdbc:mariadb}
spring.datasource.username=${DB_USERNAME}
spring.datasource.password=${DB_PASSWORD}

spring.jpa.hibernate.ddl-auto=update
spring.jpa.properties.hibernate.format_sql=true
spring.jpa.show-sql=true
spring.jpa.properties.hibernate.use_sql_comments=true

logging.level.com.refitbackend=INFO
logging.level.org.hibernate.SQL=DEBUG
logging.level.org.hibernate.type.descriptor.sql.BasicBinder=TRACE

jwt.secret=${JWT_SECRET:12345678901234567890123456789012}

file.upload-dir=C:/Users/EZEN/Desktop/refit_fullstack_project/refit_backend/build/resources/main/static/donation

# 파일 업로드 설정
spring.servlet.multipart.max-file-size=10MB
spring.servlet.multipart.max-request-size=100MB
spring.servlet.multipart.file-size-threshold=2KB
spring.servlet.multipart.location=C:/Users/EZEN/Desktop/refit_fullstack_project/refit_backend/build/resources/main/static/donation

spring.servlet.multipart.resolve-lazily=true

# Tomcat 파일 업로드 제한 설정
server.tomcat.max-http-form-post-size=100MB
server.tomcat.max-swallow-size=100MB

# Tomcat 파일 개수 제한 설정
server.tomcat.max-http-header-size=8KB
server.tomcat.max-connections=8192
server.tomcat.accept-count=100

# 포트원 API 설정
portone.api.key=${PORTONE_API_KEY:your_portone_api_key_here}
portone.api.secret=${PORTONE_API_SECRET:your_portone_api_secret_here}

# Google Cloud Vision API 설정
spring.cloud.gcp.vision.enabled=true
spring.cloud.gcp.vision.project-id=${GOOGLE_PROJECT_ID:your_google_project_id}
spring.cloud.gcp.vision.credentials.location=${GOOGLE_CREDENTIALS_PATH:classpath:google-vision-key.json}

# Google Cloud 인증 환경 변수 설정
GOOGLE_APPLICATION_CREDENTIALS=${GOOGLE_CREDENTIALS_PATH:classpath:google-vision-key.json}

google.vision.key-file-path=${GOOGLE_VISION_KEY_PATH:src/main/resources/google-vision-key.json}